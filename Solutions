

#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
using namespace std;

int prev_Difference(int n, int i) {
    int ith_digit = (n / (int)pow(10, i-1)) % 10;
    int i_minus_1_digit = (n / (int)pow(10, i-2)) % 10;
    return ith_digit - i_minus_1_digit;
}

vector<int> all_Prev_Difference(int n) {
    vector<int> result;
    int num_digits = log10(n) + 1;
    for (int i = 2; i <= num_digits; i++) {
        result.push_back(prev_Difference(n, i));
    }
    return result;
}

vector<int> common_Prev_Diff_In_Order(int n1, int n2) {
    vector<int> prev_diffs_n1 = all_Prev_Difference(n1);
    vector<int> prev_diffs_n2 = all_Prev_Difference(n2);
    vector<int> common_diffs;
    for (int i = 0; i < prev_diffs_n1.size(); i++) {
        if (find(prev_diffs_n2.begin(), prev_diffs_n2.end(), prev_diffs_n1[i]) != prev_diffs_n2.end()) {
            common_diffs.push_back(prev_diffs_n1[i]);
        }
    }
    return common_diffs;
}

int remove_common_differences(int n1, int n2) {
    vector<int> common_diffs = common_Prev_Diff_In_Order(n1, n2);
    int result = 0;
    int num_digits_n1 = log10(n1) + 1;
    for (int i = num_digits_n1-1; i >= 0; i--) {
        int curr_digit = (n1 / (int)pow(10, i)) % 10;
        int curr_diff = prev_Difference(n1, i+2);
        if (find(common_diffs.begin(), common_diffs.end(), curr_diff) == common_diffs.end()) {
            result = curr_digit + result * 10;
        }
    }
    return result;
}


int main() {
    int n1, n2;
    cin >> n1 >> n2;
    int result = remove_common_differences(n1, n2);
    cout << result << endl;
    return 0;
}

//send extra test case if this is not working
