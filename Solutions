Revised code :

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

vector<int> all_Prev_Difference(const string& n) {
    vector<int> result;
    for (int i = 1; i < n.size(); i++) {
        int ith_digit = n[i] - '0';
        int i_minus_1_digit = n[i-1] - '0';
        result.push_back(ith_digit - i_minus_1_digit);
    }
    return result;
}

vector<int> common_Prev_Diff_In_Order(const string& n1, const string& n2) {
    vector<int> prev_diffs_n1 = all_Prev_Difference(n1);
    vector<int> prev_diffs_n2 = all_Prev_Difference(n2);
    vector<int> common_diffs;
    for (int i = 0; i < prev_diffs_n1.size(); i++) {
        if (find(prev_diffs_n2.begin(), prev_diffs_n2.end(), prev_diffs_n1[i]) != prev_diffs_n2.end()) {
            common_diffs.push_back(prev_diffs_n1[i]);
        }
    }
    return common_diffs;
}

string remove_common_differences(const string& n1, const string& n2) {
    vector<int> common_diffs = common_Prev_Diff_In_Order(n1, n2);
    string result;
    for (int i = 0; i < n1.size(); i++) {
        int curr_digit = n1[i] - '0';
        int curr_diff = i == 0 ? 0 : (n1[i] - n1[i-1]);
        if (find(common_diffs.begin(), common_diffs.end(), curr_diff) == common_diffs.end()) {
            result += n1[i];
        }
    }
    return result;
}

int main() {
    string n1, n2;
    cin >> n1 >> n2;
    string result = remove_common_differences(n1, n2);
    cout << result << endl;
    return 0;
}
